#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('integration:server');
var http = require('http');
//var chokidar = require('chokidar');
var fs = require('fs');
const path = require('path');
var mongodb = require("mongodb");
var ObjectID = mongodb.ObjectID;

let log = console.log.bind(console)

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

mongodb.MongoClient.connect(process.env.MONGODB_URI || "mongodb://heroku_8966vzgn:3q2klt6c8a0rrmvkuh4h2bnpa9@ds235180.mlab.com:35180/heroku_8966vzgn", function (err, client) {
  if (err) {
    console.log(err);
    process.exit(1);
  }

  // Save database object from the callback for reuse.
  db = client.db();
  console.log("Database connection ready");

  var server = http.createServer(app);
  server.listen(port);
  server.on('error', onError);
  server.on('listening', function () {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log('Listening on ' + bind);
  });
});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

